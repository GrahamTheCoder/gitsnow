import re
import click
import os
import re
from pathlib import Path

from . import db
from .db_mock import get_mock_connection
from .dependencies import get_dependency_ordered_files
from .format import format_sql
from .diff import compare_file_to_db
from sqlfluff.core import Linter, FluffConfig

config = FluffConfig(overrides={"dialect": "snowflake"})
linter = Linter(config=config)

@click.group()
def cli():
    """A CLI tool for Snowflake DevOps."""
    pass

@cli.command(name='db-to-folder')
@click.option('--scripts-dir', required=True, type=click.Path(file_okay=False, dir_okay=True), help="Directory to output the scripts to.")
@click.option('--db-name', envvar='SNOWFLAKE_DATABASE', required=True, help="Snowflake database name.")
@click.option('--schema', 'schemas', multiple=True, help="Specific schema(s) to export. Can be used multiple times. If not provided, all schemas are exported.")
@click.option('--test', is_flag=True, help="Use a mock connection for testing.")
def db_to_folder(scripts_dir, db_name, schemas, test):
    """Export all DB objects' canonical DDL into files under the output folder."""
    output_path = Path(scripts_dir)
    output_path.mkdir(parents=True, exist_ok=True)

    conn = db.get_connection() if not test else get_mock_connection()

    try:
        if not schemas:
            schemas = db.get_all_schemas(conn, db_name)

        click.echo(f"Exporting objects from database '{db_name}' to '{scripts_dir}'...")

        for schema_name in schemas:
            objects = db.get_objects_in_schema(conn, db_name, schema_name)
            for obj in objects:
                obj_type_dir = output_path / schema_name.lower() / obj.type.lower()
                obj_type_dir.mkdir(parents=True, exist_ok=True)
                formatted_ddl = format_sql(obj.ddl)
                file_path = obj_type_dir / f"{obj.name.lower()}.sql"
                file_path.write_text(formatted_ddl)
                click.echo(f"  - Wrote {file_path}")

        click.echo("Export complete.")
    except Exception as e:
        raise click.ClickException(f"An error occurred: {e}")
    finally:
        if conn:
            conn.close()

@cli.command(name='folder-to-script')
@click.option('--scripts-dir', required=True, type=click.Path(exists=True, file_okay=False, dir_okay=True), help="Directory containing the SQL scripts.")
@click.option('--output-file', required=True, type=click.Path(dir_okay=False), help="File to write the deployment SQL to.")
@click.option('--test', is_flag=True, help="Use a mock connection for testing.")
def folder_to_script(scripts_dir, output_file, test):
    """Generate a SQL deployment script for objects that changed compared to the folder."""
    scripts_path = Path(scripts_dir)

    conn = db.get_connection() if not test else get_mock_connection()

    try:
        ordered_files = get_dependency_ordered_files(scripts_path)
        click.echo(f"Found {len(ordered_files)} total objects. Checking for changes...")

        changed_files = []

        for file_path in ordered_files:
            is_different, reason = compare_file_to_db(file_path, conn)
            if is_different:
                changed_files.append(file_path)
                click.echo(f"  - CHANGE DETECTED ({reason}): {file_path.relative_to(scripts_path)}")

        if not changed_files:
            click.echo("No changes detected. Database is in sync with scripts.")
            return

        click.echo(f"\nFound {len(changed_files)} changed objects to deploy.")

        # Write the original deployment script (using EXECUTE IMMEDIATE FROM)
        with open(output_file, 'w') as f:
            f.write("-- Deployment script generated by Snowflake DevOps Tools\n")
            f.write("-- Changes to be applied in dependency order\n\n")
            for file_path in changed_files:
                relative_path = file_path.relative_to(scripts_path.parent)
                f.write(f"-- Deploying: {relative_path}\n")
                f.write(f"EXECUTE IMMEDIATE FROM '@/{relative_path}';\n\n")

        # Write the full inline deployment script
        full_output_file = Path(output_file).with_suffix('.full.sql')
        with open(full_output_file, 'w') as f_full:
            f_full.write("-- FULL Deployment script generated by Snowflake DevOps Tools\n")
            f_full.write("-- All changes in dependency order, scripts inlined\n\n")
            schemas = set(file_path.parent.parent.name for file_path in changed_files)
            for schema in schemas:
                f_full.write(f"create schema if not exists {schema};\n")

            for file_path in changed_files:
                f_full.write(f"use schema {file_path.parent.parent.name};\n")
                relative_path = file_path.relative_to(scripts_path.parent)

                f_full.write(f"-- Deploying: {relative_path}\n")
                f_full.write(f"use schema {file_path.parent.parent.name};\n")
                script_text = file_path.read_text()
                f_full.write(script_text)
                f_full.write("\n\n")

        click.echo(f"\nDeployment script written to '{output_file}'.")
        click.echo(f"Full inline deployment script written to '{full_output_file}'.")
        click.echo("NOTE: You must upload the script files to a named stage (e.g. git stage) for the 'EXECUTE IMMEDIATE' script to work.")
    except Exception as e:
        raise click.ClickException(f"An error occurred: {e}")
    finally:
        if conn and not test:
            conn.close()


if __name__ == '__main__':
    cli()
